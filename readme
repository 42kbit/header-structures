Data structures!
Meta of the project is to create a simple yet efficent to use 
one header data structures, with minimized header dependency.

current dependency:
	string.h in array.h (memmove needed)

current priority:
	RED-BLACK TREE. (after it's completion, bin_tree.h will
		pass away... sadly)
TESTS:
Tested with 256*256*256 (16 mil) operations of insert.
	BIN TREE:
		RAND INSERT: 22 SEC
		INORDERED INSERT: 2M30SEC THAN SEGFAULT
		FIND: log2 n <= O(n) <= n
	RED-BLACK TREE:
		RAND INSERT: 25 SEC
		INORDERED INSERT: 10 SEC
		FIND: O(n) = log2 n (or so)

MEMORY:
	NOTE:
		POINTER SIZE IS ASSUMED 8 BYTES
	BIN TREE:
		2 POINTERS (left, right)
		TOTAL: 16 BYTES 
	RED-BLACK TREE:
		3 POINTERS (left, right, parent) + COLOR
		TOTAL: 25 BYTES
	IN SCALE:
		16777216 nodes (2^24)
		BIN TREE: 256 MIB
		RED-BLACK TREE: 400 MIB

PROS OF EACH:
	BIN TREE:
		PROS:
			ONLY 2 POINTERS FOR EACH NODE
			LITTLE FASTER WHEN INSERTING RANDOM
				ORDERED NODES
		CONS:
			UNSTABLE ( INORDERED INSERT IS VEEEEERY SLOW )
	RED-BLACK TREE:
		PROS:
			STABLE AS FUCK
			WORKS VERY GOOD WITH INORDERED NODE
			FAST SEARCH (BINARY SEARCH + MAX HEIGHT = log2 n)
		CONS:
			WORKS LITTLE SLOWER, COMPARED TO BIN TREE,
				WHEN INSERTING RANDOM ORDERED NODES
			CONSUMES MORE MEMORY, DUE TO PARENT POINTER IN
				NODE.

For use just simply copy headers to your project!

Idea from list.h file from linux kernel.
God bless open source!
